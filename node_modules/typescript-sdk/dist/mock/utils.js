"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRecordingMocks = exports.putMocks = void 0;
const mock_1 = require("./mock");
function putMocks(mock) {
    mock_1.grpcClient.PutMock({ Path: mock_1.mockPath, Mock: mock }, (err, response) => {
        var _a;
        if (err !== null) {
            console.error(err);
        }
        if ((response === null || response === void 0 ? void 0 : response.Inserted) !== undefined && (response === null || response === void 0 ? void 0 : response.Inserted.greaterThan(0))) {
            console.log("ðŸŸ  Captured the mocked outputs for Http dependency call with meta: ", (_a = mock.Spec) === null || _a === void 0 ? void 0 : _a.Metadata);
        }
    });
}
exports.putMocks = putMocks;
function startRecordingMocks(path, mode, name, mockId) {
    mock_1.grpcClient.StartMocking({
        Mode: mode,
        Path: path,
    }, function (err, response) {
        if (err !== null) {
            console.error("failed to start mocking due to error: ", err);
            return;
        }
        if (response === null || response === void 0 ? void 0 : response.Exists) {
            console.log("ðŸš¨ Keploy failed to record dependencies because yaml file already exists", name, " in directory: ", path, ".\n");
            mock_1.MockIds[mockId] = true;
        }
    });
}
exports.startRecordingMocks = startRecordingMocks;
