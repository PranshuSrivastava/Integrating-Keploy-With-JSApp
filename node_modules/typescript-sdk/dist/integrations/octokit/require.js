"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrappedNodeFetch = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-ignore
const require_in_the_middle_1 = __importDefault(require("require-in-the-middle"));
const merge_descriptors_1 = __importDefault(require("merge-descriptors"));
const node_fetch_1 = __importStar(require("node-fetch"));
const context_1 = require("../../src/context");
const stream_1 = require("stream");
const util_1 = require("../../src/util");
const utils_1 = require("../../mock/utils");
const keploy_1 = require("../../src/keploy");
const middleware_1 = require("../express/middleware");
const http_status_codes_1 = require("http-status-codes");
const mock_1 = require("../../mock/mock");
// @ts-ignore
(0, require_in_the_middle_1.default)(["octokit"], function (exported) {
    const octokitDefault = exported;
    octokitDefault.Octokit = octokitDefault.Octokit.defaults({
        request: {
            fetch: wrappedNodeFetch(node_fetch_1.default),
        },
    });
    class WrappedOctokit extends octokitDefault.Octokit {
        constructor(props) {
            if (props.request !== undefined &&
                props.request.fetch !== undefined &&
                typeof props.request.fetch === typeof wrappedNodeFetch) {
                super(props);
                return;
            }
            const request = {
                fetch: wrappedNodeFetch(props.request === undefined || props.request.fetch === undefined
                    ? node_fetch_1.default
                    : props.request.fetch),
            };
            if (props.request !== undefined) {
                (0, merge_descriptors_1.default)(request, props.request, false);
            }
            props.request = request;
            super(props);
        }
    }
    class WrappedApp extends octokitDefault.App {
        constructor(props) {
            if (props.Octokit !== undefined) {
                props.Octokit = props.Octokit.defaults({
                    request: {
                        fetch: wrappedNodeFetch(node_fetch_1.default),
                    },
                });
            }
            else {
                props.Octokit = octokitDefault.Octokit.defaults({
                    request: {
                        fetch: wrappedNodeFetch(node_fetch_1.default),
                    },
                });
            }
            super(props);
        }
    }
    const wrappedExports = {
        Octokit: WrappedOctokit,
        App: WrappedApp,
    };
    exported = (0, merge_descriptors_1.default)(wrappedExports, octokitDefault, false);
    return exported;
});
function getHeadersInit(headers) {
    const result = {};
    for (const key in headers) {
        result[key] = headers[key].join(", ");
    }
    return result;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function wrappedNodeFetch(fetchFunc) {
    // const fetchFunc = fetch;
    function wrappedFetch(url, options) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function* () {
            if ((0, context_1.getExecutionContext)() == undefined ||
                (0, context_1.getExecutionContext)().context == undefined) {
                console.error("keploy context is not present to mock dependencies");
                return;
            }
            const ctx = (0, context_1.getExecutionContext)().context;
            let resp = new node_fetch_1.Response();
            let rinit = {};
            const meta = {
                name: "node-fetch",
                url: url,
                options: options,
                type: "HTTP_CLIENT",
            };
            switch (ctx.mode) {
                case "record":
                    resp = yield fetchFunc.apply(this, [url, options]);
                    const clonedResp = resp.clone();
                    rinit = {
                        headers: getHeadersInit(clonedResp.headers.raw()),
                        status: resp.status,
                        statusText: resp.statusText,
                    };
                    const respData = [];
                    (_a = clonedResp === null || clonedResp === void 0 ? void 0 : clonedResp.body) === null || _a === void 0 ? void 0 : _a.on("data", function (chunk) {
                        respData.push(chunk);
                    });
                    (_b = clonedResp === null || clonedResp === void 0 ? void 0 : clonedResp.body) === null || _b === void 0 ? void 0 : _b.on("end", function () {
                        return __awaiter(this, void 0, void 0, function* () {
                            const httpMock = {
                                Version: keploy_1.V1_BETA1,
                                Name: ctx.testId,
                                Kind: keploy_1.HTTP_EXPORT,
                                Spec: {
                                    Metadata: meta,
                                    Req: {
                                        URL: url,
                                        Body: JSON.stringify(options === null || options === void 0 ? void 0 : options.body),
                                        Header: (0, middleware_1.getRequestHeader)(options.headers),
                                        Method: options.method,
                                        // URLParams:
                                    },
                                    Res: {
                                        StatusCode: rinit.status,
                                        Header: (0, middleware_1.getResponseHeader)(rinit.headers),
                                        Body: respData.toString(),
                                    },
                                },
                            };
                            // record mocks for unit-test-mock-library
                            if (ctx.fileExport === true) {
                                mock_1.MockIds[ctx.testId] !== true ? (0, utils_1.putMocks)(httpMock) : "";
                            }
                            else {
                                ctx.mocks.push(httpMock);
                                // ProcessDep(meta, [respData, rinit]);
                                const res = [];
                                // for (let i = 0; i < outputs.length; i++) {
                                res.push({ Bin: (0, util_1.stringToBinary)(JSON.stringify(respData)) });
                                res.push({ Bin: (0, util_1.stringToBinary)(JSON.stringify(rinit)) });
                                // }
                                ctx.deps.push({
                                    Name: meta.name,
                                    Type: meta.type,
                                    Meta: meta,
                                    Data: res,
                                });
                            }
                        });
                    });
                    break;
                case "test":
                    const outputs = new Array(2);
                    if (ctx.mocks != undefined &&
                        ctx.mocks.length > 0 &&
                        ctx.mocks[0].Kind == keploy_1.HTTP_EXPORT) {
                        const header = {};
                        for (const k in (_d = (_c = ctx.mocks[0].Spec) === null || _c === void 0 ? void 0 : _c.Res) === null || _d === void 0 ? void 0 : _d.Header) {
                            header[k] = (_g = (_f = (_e = ctx.mocks[0].Spec) === null || _e === void 0 ? void 0 : _e.Res) === null || _f === void 0 ? void 0 : _f.Header[k]) === null || _g === void 0 ? void 0 : _g.Value;
                        }
                        outputs[1] = {
                            headers: getHeadersInit(header),
                            status: ctx.mocks[0].Spec.Res.StatusCode,
                            statusText: (0, http_status_codes_1.getReasonPhrase)(ctx.mocks[0].Spec.Res.StatusCode),
                        };
                        outputs[0] = [ctx.mocks[0].Spec.Res.Body];
                        if (ctx === null || ctx === void 0 ? void 0 : ctx.fileExport) {
                            console.log("🤡 Returned the mocked outputs for Http dependency call with meta: ", meta);
                        }
                        ctx.mocks.shift();
                    }
                    else {
                        (0, util_1.ProcessDep)({}, outputs);
                    }
                    rinit.headers = new node_fetch_1.Headers(outputs[1].headers);
                    rinit.status = outputs[1].status;
                    rinit.statusText = outputs[1].statusText;
                    const buf = [];
                    outputs[0].map((el) => {
                        buf.push(Buffer.from(el));
                    });
                    resp = new node_fetch_1.Response(stream_1.Readable.from(buf), rinit);
                    break;
                case "off":
                    return fetchFunc.apply(this, [url, options]);
                default:
                    console.debug("mode is not valid. Please set valid keploy mode using env variables");
                    return fetchFunc.apply(this, [url, options]);
            }
            return resp;
        });
    }
    return (0, merge_descriptors_1.default)(wrappedFetch, fetchFunc, false);
}
exports.wrappedNodeFetch = wrappedNodeFetch;
