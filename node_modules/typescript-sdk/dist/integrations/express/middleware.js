"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.afterMiddleware = exports.getResponseHeader = exports.getRequestHeader = void 0;
const context_1 = require("../../src/context");
class ResponseBody {
    constructor() {
        this.body = [];
    }
    static push(req, chunks) {
        const resp = ResponseBody.responseMap.get(req);
        if (resp === undefined || resp.body === undefined) {
            const resp = new ResponseBody();
            resp.body = [chunks];
            ResponseBody.responseMap.set(req, resp);
            return;
        }
        resp.body.push(chunks);
        ResponseBody.responseMap.set(req, resp);
    }
    static get(req) {
        const ctx = ResponseBody.responseMap.get(req);
        return ctx === null || ctx === void 0 ? void 0 : ctx.body;
    }
}
ResponseBody.responseMap = new WeakMap();
// got package identifies header fields to identify request and response therefore, request headers
// should not contain header fields (like: content-length, connection)
function getRequestHeader(headers) {
    const result = {};
    for (const key in headers) {
        let val = new Array();
        if (typeof headers[key] === typeof "s") {
            val.push(headers[key]);
        }
        else if (typeof headers[key] === typeof ["s"]) {
            val = headers[key];
        }
        result[key] = { Value: val };
    }
    return result;
}
exports.getRequestHeader = getRequestHeader;
function getResponseHeader(header) {
    const result = {};
    for (const key in header) {
        let val = new Array();
        if (typeof header[key] === typeof "s" || typeof header[key] === typeof 1) {
            val.push(header[key]);
        }
        else if (typeof header[key] === typeof ["s"]) {
            val = header[key];
        }
        result[key] = { Value: val };
    }
    return result;
}
exports.getResponseHeader = getResponseHeader;
// middleware
function middleware(keploy) {
    return (req, res, next) => {
        res.on("finish", () => {
            afterMiddleware(keploy, req, res);
        });
        if ((process.env.KEPLOY_MODE != undefined &&
            process.env.KEPLOY_MODE == "off") ||
            keploy == undefined) {
            (0, context_1.createExecutionContext)({ mode: "off" });
            next();
            return;
        }
        const id = req.get("KEPLOY_TEST_ID");
        // test mode
        if (id != undefined && id != "") {
            (0, context_1.createExecutionContext)({
                mode: "test",
                testId: id,
                deps: keploy.getDependencies(id),
                mocks: keploy.getMocks(id),
            });
            captureResp(req, res, next);
            return;
        }
        // record mode
        (0, context_1.createExecutionContext)({ mode: "record", deps: [], mocks: [] });
        captureResp(req, res, next);
    };
}
exports.default = middleware;
function captureResp(req, res, next) {
    const oldSend = res.send;
    res.send = (chunk) => {
        ResponseBody.push(req, chunk);
        return oldSend.apply(res, [chunk]);
    };
    next();
    return;
}
function afterMiddleware(keploy, req, res) {
    if ((process.env.KEPLOY_MODE != undefined &&
        process.env.KEPLOY_MODE == "off") ||
        keploy == undefined) {
        return;
    }
    const id = req.get("KEPLOY_TEST_ID");
    if (id !== undefined && id !== "") {
        const respHeader = getResponseHeader(res.getHeaders());
        const resp = {
            status_code: res.statusCode,
            header: respHeader,
            // @ts-ignore
            body: String(ResponseBody.get(req)),
        };
        keploy.putResp(id, resp);
        return;
    }
    // req.headers
    const reqHeader = getRequestHeader(req.headers);
    // response headers
    const respHeader = getResponseHeader(res.getHeaders());
    keploy.capture({
        Captured: Date.now(),
        AppID: keploy.appConfig.name,
        // change url to uri ex: /url-shortner/:param
        URI: req.originalUrl,
        HttpReq: {
            Method: req.method,
            URL: req.originalUrl,
            URLParams: req.params,
            Header: reqHeader,
            Body: JSON.stringify(req.body),
        },
        HttpResp: {
            StatusCode: res.statusCode,
            Header: respHeader,
            // @ts-ignore
            Body: String(ResponseBody.get(req)),
        },
        Dependency: (0, context_1.getExecutionContext)().context.deps,
        TestCasePath: keploy.appConfig.testCasePath,
        MockPath: keploy.appConfig.mockPath,
        Mocks: (0, context_1.getExecutionContext)().context.mocks,
    });
}
exports.afterMiddleware = afterMiddleware;
