"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewContext = exports.MockIds = exports.mockPath = exports.grpcClient = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const grpc = __importStar(require("@grpc/grpc-js"));
const protoLoader = __importStar(require("@grpc/proto-loader"));
const path_1 = __importStar(require("path"));
const mode_1 = __importStar(require("../src/mode"));
const context_1 = require("../src/context");
const utils_1 = require("./utils");
const PORT = 6789;
const PROTO_FILE = "../proto/services.proto";
const packageDef = protoLoader.loadSync(path_1.default.resolve(__dirname, PROTO_FILE));
const grpcObj = grpc.loadPackageDefinition(packageDef);
exports.grpcClient = new grpcObj.services.RegressionService(`0.0.0.0:${PORT}`, grpc.credentials.createInsecure());
exports.mockPath = "";
exports.MockIds = {};
function NewContext(conf) {
    let mode = mode_1.MODE_TEST, path = conf !== undefined && conf.Path !== undefined ? conf.Path : "";
    if (path === "") {
        try {
            path = process.cwd();
        }
        catch (err) {
            console.log("Failed to get the path of current directory");
            console.log(err);
        }
    }
    else if (path[0] !== "/") {
        try {
            path = (0, path_1.resolve)(conf.Path);
        }
        catch (err) {
            console.log("Failed to get the absolute path from relative conf.path");
            console.log(err);
        }
    }
    path += "/mocks";
    exports.mockPath = path;
    if (process.env.KEPLOY_MODE !== undefined &&
        mode_1.default.Valid(process.env.KEPLOY_MODE)) {
        //   if (process.)
        mode = process.env.KEPLOY_MODE;
    }
    // mode mostly dependent on conf.Mode
    if (mode_1.default.Valid(conf.Mode)) {
        mode = conf.Mode;
    }
    switch (mode) {
        case "test":
            if (conf.Name === "") {
                console.log("üö® Please enter the auto generated name to mock the dependencies using Keploy.");
            }
            (0, context_1.createExecutionContext)({
                mode: mode,
                testId: conf.Name,
                mocks: [],
                fileExport: true,
            });
            const ctx = (0, context_1.getExecutionContext)().context;
            exports.grpcClient.GetMocks({ Path: path, Name: conf.Name }, (err, response) => {
                if (err) {
                    console.error(err);
                    return;
                }
                ctx.mocks = response === null || response === void 0 ? void 0 : response.Mocks;
                return response;
            });
            break;
        case "record":
            (0, context_1.createExecutionContext)({
                mode: mode,
                testId: conf.Name,
                mocks: [],
                fileExport: true,
            });
            break;
        default:
            console.log("Keploy mode: (", mode, ") is not a valid mode");
            break;
    }
    let name = "";
    if (conf.Name !== "") {
        name = "for " + conf.Name;
    }
    console.log("\nüí°‚ö°Ô∏è Keploy created new mocking context in", mode, "mode", name, ".\n If you dont see any logs about your dependencies below, your dependency/s are NOT wrapped.\n");
    (0, utils_1.startRecordingMocks)(path + "/" + conf.Name + ".yaml", mode, name, conf.Name);
}
exports.NewContext = NewContext;
