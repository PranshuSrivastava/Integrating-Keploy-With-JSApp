import { Headers, OptionsOfJSONResponseBody, Response } from "got";
export declare class Request {
    headers: Headers;
    options: OptionsOfJSONResponseBody;
    constructor();
    setHttpHeader(key: string, value: string): this;
    setHttpHeaders(header: {
        [key: string]: string[];
    }): this;
    get(requestUrl: string, searchParams?: Record<string, string | number | boolean | undefined>): this;
    post(requestUrl: string, body: string, searchParams?: Record<string, string | number | boolean | undefined>): this;
    delete(requestUrl: string, body?: string, searchParams?: Record<string, string | number | boolean | undefined>): this;
    put(requestUrl: string, body?: string, searchParams?: Record<string, string | number | boolean | undefined>): this;
    patch(requestUrl: string, body?: string, searchParams?: Record<string, string | number | boolean | undefined>): this;
    create(requestMethod: "get" | "post" | "delete" | "patch" | "put", requestUrl: string, body: string): this;
    raw(): OptionsOfJSONResponseBody;
}
export default class HttpClient {
    baseUrl: string;
    constructor(baseUrl: string);
    makeHttpRequest<T>(request: Request): Promise<T>;
    makeHttpRequestRaw<T>(request: Request): Promise<Response<T>>;
}
