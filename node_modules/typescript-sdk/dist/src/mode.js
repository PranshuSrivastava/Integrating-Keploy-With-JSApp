"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MODE_OFF = exports.MODE_TEST = exports.MODE_RECORD = void 0;
const context_1 = require("./context");
exports.MODE_RECORD = "record", exports.MODE_TEST = "test", exports.MODE_OFF = "off";
// Mode represents the mode at which the SDK is operating
// MODE_RECORD is for recording API calls to generate testcases
// MODE_TEST is for testing the application on previous recorded testcases
// MODE_OFF disables keploy SDK automatically from the application
//
// By default mode is set to off.
class Mode {
    constructor() {
        this.mode = "off";
    }
    // Valid checks if the provided mode is valid
    static Valid(m) {
        if (m == exports.MODE_RECORD || m == exports.MODE_TEST || m == exports.MODE_OFF) {
            return true;
        }
        return false;
    }
    // GetMode returns the mode of the keploy SDK
    GetMode() {
        return this.mode;
    }
    // SetTestMode sets the keploy SDK mode to MODE_TEST
    SetTestMode() {
        this.SetMode("test");
    }
    // SetMode sets the keploy SDK mode
    // error is returned if the mode is invalid
    SetMode(m) {
        if (!Mode.Valid(m)) {
            return new Error("invalid mode: " + m);
        }
        this.mode = m;
    }
    // GetModeFromContext returns the mode on which SDK is configured by accessing environment variable.
    GetModeFromContext() {
        const kctx = (0, context_1.getExecutionContext)();
        if ((0, context_1.getExecutionContext)() == undefined ||
            (0, context_1.getExecutionContext)().context == undefined ||
            (0, context_1.getExecutionContext)().context.keployContext == undefined) {
            return exports.MODE_OFF;
        }
        return kctx.Mode;
    }
}
exports.default = Mode;
