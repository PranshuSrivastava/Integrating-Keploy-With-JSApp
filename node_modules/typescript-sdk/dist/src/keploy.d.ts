import HttpClient from "./client";
import { RegressionServiceClient } from "../proto/services/RegressionService";
import { TestCaseReq } from "../proto/services/TestCaseReq";
import { TestCase } from "../proto/services/TestCase";
import { StrArr } from "../proto/services/StrArr";
export declare const V1_BETA1 = "api.keploy.io/v1beta1", HTTP_EXPORT = "Http", GENERIC_EXPORT = "Generic";
declare type AppConfigFilter = {
    urlRegex?: string;
};
declare type AppConfig = {
    name: string;
    host: string;
    port: number;
    delay: number;
    timeout: number;
    filter: AppConfigFilter;
    testCasePath: string;
    mockPath: string;
};
declare type ServerConfig = {
    url: string;
    licenseKey: string;
};
declare type ID = string;
declare type HttpResponse = {
    status_code: number;
    header: {
        [key: string]: StrArr;
    };
    body: string;
};
export default class Keploy {
    appConfig: AppConfig;
    serverConfig: ServerConfig;
    responses: Record<ID, HttpResponse>;
    dependencies: Record<ID, unknown>;
    mocks: Record<ID, unknown>;
    client: HttpClient;
    grpcClient: RegressionServiceClient;
    constructor(app?: Partial<AppConfig>, server?: Partial<ServerConfig>);
    validateServerConfig({ url, licenseKey, }: {
        url?: string | undefined;
        licenseKey?: string | undefined;
    }): {
        url: string;
        licenseKey: string;
    };
    validateAppConfig({ name, host, port, delay, timeout, filter, testCasePath, mockPath, }: {
        name?: string | undefined;
        host?: string | undefined;
        port?: string | number | undefined;
        delay?: string | number | undefined;
        timeout?: string | number | undefined;
        filter?: {} | undefined;
        testCasePath?: string | undefined;
        mockPath?: string | undefined;
    }): {
        name: string;
        host: string;
        port: number;
        delay: number;
        timeout: number;
        filter: {};
        testCasePath: string;
        mockPath: string;
    };
    runTests(): Promise<this>;
    getDependencies(id: ID): object[] | undefined;
    getMocks(id: ID): object[] | undefined;
    getResp(id: ID): HttpResponse;
    putResp(id: ID, resp: HttpResponse): void;
    capture(req: TestCaseReq): Promise<void>;
    fetch(testcases: TestCase[], offset: number): Promise<TestCase[]>;
    test(): Promise<void>;
    assertTests(): Promise<unknown>;
    afterFetch(testCases: TestCase[]): Promise<void>;
    get(id: ID): Promise<unknown>;
    private end;
    private simulate;
    private put;
    private denoise;
}
export {};
