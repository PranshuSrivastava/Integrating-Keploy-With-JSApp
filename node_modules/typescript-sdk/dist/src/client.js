"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const got_1 = __importDefault(require("got"));
class Request {
    constructor() {
        this.headers = { "User-Agent": "keploy-typescript-sdk" };
        this.options = {};
    }
    setHttpHeader(key, value) {
        this.headers[key] = value;
        return this;
    }
    setHttpHeaders(header) {
        for (const key in header) {
            if (header[key].length == 1) {
                this.headers[key] = header[key][0];
            }
            else {
                this.headers[key] = header[key];
            }
        }
        return this;
    }
    get(requestUrl, searchParams) {
        this.options = {
            url: requestUrl,
            method: "GET",
            headers: this.headers,
            responseType: "json",
            searchParams,
        };
        return this;
    }
    post(requestUrl, body, searchParams) {
        this.options = {
            body,
            url: requestUrl,
            method: "POST",
            headers: this.headers,
            responseType: "json",
            searchParams,
        };
        return this;
    }
    delete(requestUrl, body, searchParams) {
        this.options = {
            body,
            url: requestUrl,
            method: "DELETE",
            headers: this.headers,
            searchParams,
        };
        return this;
    }
    put(requestUrl, body, searchParams) {
        this.options = {
            body,
            url: requestUrl,
            method: "PUT",
            headers: this.headers,
            responseType: "json",
            searchParams,
        };
        return this;
    }
    patch(requestUrl, body, searchParams) {
        this.options = {
            body,
            url: requestUrl,
            method: "PATCH",
            headers: this.headers,
            responseType: "json",
            searchParams,
        };
        return this;
    }
    create(requestMethod, requestUrl, body) {
        if (requestMethod.toLowerCase() === "get") {
            return this.get(requestUrl);
        }
        else if (requestMethod.toLowerCase() === "delete") {
            return this.delete(requestUrl, body);
        }
        else if (requestMethod.toLowerCase() === "put") {
            return this.put(requestUrl, body);
        }
        else if (requestMethod.toLowerCase() === "patch") {
            return this.patch(requestUrl, body);
        }
        else {
            return this.post(requestUrl, body);
        }
    }
    raw() {
        return this.options;
    }
}
exports.Request = Request;
class HttpClient {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
    }
    makeHttpRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, request.raw()), { prefixUrl: this.baseUrl });
            return (0, got_1.default)(options).json();
        });
    }
    makeHttpRequestRaw(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, request.raw()), { prefixUrl: this.baseUrl });
            const resp = yield (0, got_1.default)(options);
            return resp;
        });
    }
}
exports.default = HttpClient;
